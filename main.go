package main

import (
	"bytes"
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/apex/log"
	"github.com/apex/log/handlers/cli"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/private/util"
)

const codeLayout = `// Code is generated by terratools. DO NOT EDIT.

%s
package %s

%s
`

func main() {
	log.SetHandler(cli.Default)
	log.SetLevel(log.DebugLevel)

	resourceTypes := ResourceTypes()

	err := writeResourceTypes("gen", resourceTypes)
	if err != nil {
		log.Fatal(err.Error())
	}
	log.Infof("Generated list of Terraform AWS resource types: %d", len(resourceTypes))

	resourceFileNames := map[string]string{}
	for _, rType := range resourceTypes {
		fileName, err := GetResourceFileName(rType)
		if err != nil {
			log.Fatal(err.Error())
		}
		resourceFileNames[rType] = fileName
	}

	err = writeResourceFileNames("gen", resourceFileNames)
	if err != nil {
		log.Fatal(err.Error())
	}
	log.Infof("Generated map of file names that implement a resource type: %d", len(resourceFileNames))
}

func writeResourceTypes(outputPath string, resourceTypes []string) error {
	err := os.MkdirAll(outputPath, 0775)
	if err != nil {
		return fmt.Errorf("failed to create directory: %s", err)
	}

	err = writeGoFile(
		filepath.Join(outputPath, "resourceTypes.go"),
		codeLayout,
		"",
		"gen",
		ResourceTypesGoCode(resourceTypes),
	)
	if err != nil {
		return fmt.Errorf("failed to write list of resource types to file: %s", err)
	}

	return nil
}

func writeResourceFileNames(outputPath string, resourceFileNames map[string]string) error {
	err := os.MkdirAll(outputPath, 0775)
	if err != nil {
		return fmt.Errorf("failed to create directory: %s", err)
	}

	err = writeGoFile(
		filepath.Join(outputPath, "resourceFileNames.go"),
		codeLayout,
		"",
		"gen",
		ResourceFileNamesGoCode(resourceFileNames),
	)
	if err != nil {
		return fmt.Errorf("failed to write map of resource file names to file: %s", err)
	}

	return nil
}

// ResourceTypesGoCode generates the Go code for the list of Terraform resource types.
func ResourceTypesGoCode(terraformTypes []string) string {
	var buf bytes.Buffer
	err := resourceTypesTmpl.Execute(&buf, terraformTypes)
	if err != nil {
		panic(err)
	}

	return strings.TrimSpace(buf.String())
}

// ResourceFileNamesGoCode generates the Go code for the map of Terraform resource file names.
func ResourceFileNamesGoCode(resourceFileNames map[string]string) string {
	var buf bytes.Buffer
	err := resourceFileNamesTmpl.Execute(&buf, resourceFileNames)
	if err != nil {
		panic(err)
	}

	return strings.TrimSpace(buf.String())

}

var resourceTypesTmpl = template.Must(template.New("resourceTypes").Parse(`
// ResourceTypes is a list of all resource types supported by the Terraform AWS Provider.
var ResourceTypes = []string{
{{range .}}"{{.}}",
{{end}}}
`))

var resourceFileNamesTmpl = template.Must(template.New("resourceFileNames").Parse(`
// ResourceFileNames stores the name of the file that implements the resource type in the Terraform AWS Provider.
var ResourceFileNames = map[string]string{
{{range $key, $value := .}}"{{$key}}": "{{$value}}",
{{end}}}
`))

func writeGoFile(file string, layout string, args ...interface{}) error {
	return ioutil.WriteFile(file, []byte(util.GoFmt(fmt.Sprintf(layout, args...))), 0664)
}

// ResourceTypes returns a list of all resource types supported by the Terraform AWS Provider.
func ResourceTypes() []string {
	node, err := parser.ParseFile(token.NewFileSet(),
		"/home/jan/git/github.com/yoyolabsio/terraform-provider-aws/aws/provider.go",
		nil, 0)
	if err != nil {
		log.Fatalf(err.Error())
	}

	var result []string

	ast.Inspect(node, func(n ast.Node) bool {
		// look for a map called "ResourcesMap" that contains all the resource types
		resourcesMap, ok := n.(*ast.KeyValueExpr)
		if !ok {
			return true
		}

		resourceMapName, ok := resourcesMap.Key.(*ast.Ident)
		if !ok {
			return false
		}

		if resourceMapName.Name != "ResourcesMap" {
			return false
		}

		ast.Inspect(resourcesMap, func(n ast.Node) bool {
			mapEntry, ok := n.(*ast.KeyValueExpr)
			if !ok {
				return true
			}

			resourceType, ok := mapEntry.Key.(*ast.BasicLit)
			if !ok {
				return true
			}

			result = append(result, strings.Trim(resourceType.Value, "\""))

			return true
		})

		return true
	})

	return result
}

// GetResourceFileName returns the name of the file that implements the resource of the given resource type.
func GetResourceFileName(resourceType string) (string, error) {
	node, err := parser.ParseFile(token.NewFileSet(),
		"/home/jan/git/github.com/yoyolabsio/terraform-provider-aws/aws/provider.go",
		nil, 0)
	if err != nil {
		return "", err
	}

	var result *string

	ast.Inspect(node, func(n ast.Node) bool {
		mapEntry, ok := n.(*ast.KeyValueExpr)
		if !ok {
			return true
		}

		key, ok := mapEntry.Key.(*ast.BasicLit)
		if !ok {
			return true
		}

		if resourceType != strings.Trim(key.Value, "\"") {
			return false
		}

		resource, ok := mapEntry.Value.(*ast.CallExpr)
		if !ok {
			return false
		}

		resourceFuncName, ok := resource.Fun.(*ast.Ident)
		if !ok {
			return false
		}

		files, err := ioutil.ReadDir("/home/jan/git/github.com/yoyolabsio/terraform-provider-aws/aws")
		if err != nil {
			log.Fatal(err.Error())
		}

		for _, f := range files {
			if strings.HasPrefix(f.Name(), "resource_aws") {
				node, err := parser.ParseFile(token.NewFileSet(),
					"/home/jan/git/github.com/yoyolabsio/terraform-provider-aws/aws/"+f.Name(),
					nil, 0)
				if err != nil {
					log.Fatal(err.Error())
				}

				ast.Inspect(node, func(n ast.Node) bool {
					fn, ok := n.(*ast.FuncDecl)
					if !ok {
						return true
					}

					if fn.Name.Name == resourceFuncName.Name {
						result = aws.String(f.Name())
						return false
					}

					return true
				})
			}
		}
		return true
	})

	if result != nil {
		return *result, nil
	}

	return "", fmt.Errorf("no file found that implements resource type")
}
